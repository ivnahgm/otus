# -*- mode: ruby -*-
# vim: set ft=ruby :
# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
  :nodetap1 => {
        :box_name => "centos/7",
        :internal_net => [
                   {ip: '192.168.0.10', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "vpns-net"},
                ]
  },
  :nodetap2 => {
        :box_name => "centos/7",
        :internal_net => [
                   {ip: '192.168.0.20', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "vpns-net"},
                ]
  },
  
  :nodetun1 => {
        :box_name => "centos/7",
        :internal_net => [
                   {ip: '192.168.0.30', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "vpns-net"},
                ]
  },

  :nodetun2 => {
        :box_name => "centos/7",
        :internal_net => [
                   {ip: '192.168.0.40', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "vpns-net"},
                ]
  },

  :nodeopenvpn => {
        :box_name => "centos/7",
        :private_net => {:ip => '10.10.10.5'},
  },
  
  :nodeocserv => {
        :box_name => "centos/7",
        :private_net => {:ip => '10.10.10.10'},
  },
}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|

    config.vm.define boxname do |box|

        box.vm.box = boxconfig[:box_name]
        box.vm.host_name = boxname.to_s

        box.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--memory", "200"]
        end

        if boxconfig.key?(:internal_net)
          boxconfig[:internal_net].each do |ipconf|
            box.vm.network "private_network", ipconf
          end
        end
        
        if boxconfig.key?(:private_net)
          box.vm.network "private_network", ip: boxconfig[:private_net][:ip]
        end

        box.vm.provision "shell", inline: <<-SHELL
          mkdir -p ~root/.ssh
          cp ~vagrant/.ssh/auth* ~root/.ssh
        SHELL
        
        case boxname.to_s
        when "nodetap1"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            ip link add tap0 type gretap local 192.168.0.10 remote 192.168.0.20
            ip link set up tap0
            ip a a 192.168.1.1/30 dev tap0
            SHELL
        when "nodetap2"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            ip link add tap0 type gretap local 192.168.0.20 remote 192.168.0.10
            ip link set up tap0
            ip a a 192.168.1.2/30 dev tap0
            SHELL
        when "nodetun1"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            ip tunnel add tun0 mode gre local 192.168.0.30 remote 192.168.0.40
            ip link set up tun0
            ip a a dev tun0 192.168.1.1 peer 192.168.1.2/32
            SHELL
        when "nodetun2"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            ip tunnel add tun0 mode gre local 192.168.0.40 remote 192.168.0.30
            ip link set up tun0
            ip a a dev tun0 192.168.1.2 peer 192.168.1.1/32
            SHELL
        when "nodeopenvpn"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            yum -y install epel-release
            yum -y install openvpn
            DIR=/etc/openvpn/cert
            mkdir -p $DIR/{ca,server,client1,ca/newcerts}
            cp /vagrant/openssl.cnf $DIR/
            cp /vagrant/openvpn-server.conf /etc/openvpn/
            touch $DIR/ca/index.txt
            echo 00 > $DIR/ca/serial
            
            # ca
            openssl req -new -nodes \
            -config $DIR/openssl.cnf \
            -keyout $DIR/ca/ca.key \
            -out $DIR/ca/ca.req \
            -subj '/C=RU/ST=PK/O=Otus/CN=nodeopenvpn/emailAddress=ivnahgm@gmail.com/'
            
            openssl ca -days 3650 -create_serial -selfsign -batch \
            -config $DIR/openssl.cnf \
            -extensions v3_ca \
            -keyfile $DIR/ca/ca.key -in $DIR/ca/ca.req -out $DIR/ca/ca.crt

            # server
            openssl dhparam -out $DIR/server/dh2048.pem 2048
            
            openssl req -new -nodes \
            -config $DIR/openssl.cnf \
            -keyout $DIR/server/server.key \
            -out $DIR/server/server.req \
            -subj '/C=RU/ST=PK/O=Otus/CN=server/emailAddress=ivnahgm@gmail.com/'
            
            openssl ca -config $DIR/openssl.cnf -batch \
            -in $DIR/server/server.req -out $DIR/server/server.crt

            # client1
            openssl req -new -nodes \
            -config $DIR/openssl.cnf \
            -keyout $DIR/client1/client1.key \
            -out $DIR/client1/client1.req \
            -subj '/C=RU/ST=PK/O=Otus/CN=client1/emailAddress=ivnahgm@gmail.com/'
            
            openssl ca -config $DIR/openssl.cnf -batch \
            -in $DIR/client1/client1.req -out $DIR/client1/client1.crt

            openvpn --genkey --secret $DIR/server/ta.key

            systemctl enable openvpn@openvpn-server.service
            systemctl start openvpn@openvpn-server.service
            SHELL
        when "nodeocserv"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            yum -y install epel-release
            yum -y install ocserv
            cp /vagrant/ocserv.conf /etc/ocserv/ocserv.conf

            systemctl enable ocserv
            systemctl start ocserv

            useradd client1 -p somepass
            certtool --generate-privkey --outfile /vagrant/client1.key
            certtool --generate-certificate \
            --load-privkey /vagrant/client1.key \
            --load-ca-certificate /etc/pki/ocserv/cacerts/ca.crt \
            --load-ca-privkey /etc/pki/ocserv/private/ca.key \
            --outfile /vagrant/client1.crt \
            --template /vagrant/client1.tmpl
            SHELL
        end

      end

  end
  
  
end

